version: '3.7'

services:

    # https://hub.docker.com/_/nextcloud/
    nextcloud:
        container_name: nextcloud
        image: nextcloud
        volumes:
            - nextcloud:/var/www/html
        environment:
            MYSQL_HOST: mariadb
            MYSQL_DATABASE: nextcloud
            MYSQL_USER: nextcloud
            MYSQL_PASSWORD: nextcloud
            TZ: ${TZ}
            NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_HOST}
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.nextcloud.entrypoints: https
            traefik.http.routers.nextcloud.tls.certresolver: tlschallenge
            traefik.http.routers.nextcloud.rule: Host(`${NEXTCLOUD_HOST}`)
            traefik.http.routers.nextcloud.middlewares: secureheaders, cardcaldav
            traefik.http.middlewares.cardcaldav.replacepathregex.regex: ^/.well-known/(card|cal)dav
            traefik.http.middlewares.cardcaldav.replacepathregex.replacement: /remote.php/dav/
        networks:
            - traefik
        links:
            - mariadb

    # https://hub.docker.com/_/mariadb/
    mariadb:
        container_name: mariadb
        image: mariadb
        command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
        volumes:
            - mariadb:/var/lib/mysql
        environment:
            MYSQL_DATABASE: nextcloud
            MYSQL_USER: nextcloud
            MYSQL_PASSWORD: nextcloud
            MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
            TZ: ${TZ}
        networks:
            - traefik

    # https://hub.docker.com/r/linuxserver/raneto
    raneto:
        container_name: raneto
        image: linuxserver/raneto
        volumes:
            - 'raneto:/config'
        labels:
            traefik.enable: true
            traefik.http.routers.raneto.entrypoints: https
            traefik.http.routers.raneto.tls.certresolver: tlschallenge
            traefik.http.routers.raneto.rule: Host(`${RANETO_HOST}`)
            traefik.http.routers.raneto.middlewares: secureheaders, basicauth
        networks:
            - traefik

    # https://hub.docker.com/_/ghost/
    ghost:
        container_name: ghost
        image: ghost
        volumes:
            - 'ghost:/var/lib/ghost/content:rw'
        labels:
            traefik.enable: true
            traefik.http.routers.ghost.entrypoints: https
            traefik.http.routers.ghost.tls.certresolver: tlschallenge
            traefik.http.routers.ghost.rule: Host(`${GHOST_HOST}`)
            traefik.http.routers.ghost.middlewares: secureheaders, basicauth
        networks:
            - traefik

    # https://hub.docker.com/r/duplicati/duplicati
    duplicati:
        image: duplicati/duplicati
        container_name: duplicati
        command: ["/usr/bin/duplicati-server", "--webservice-port=8200", "--webservice-interface=any", "--webservice-allowed-hostnames=*"]
        environment:
            TZ: ${TZ}
        volumes:
            - duplicati:/data:rw
            - plex:/sources/plex:ro
            - nzbget:/sources/nzbget:ro
            - sonarr:/sources/sonarr:ro
            - radarr:/sources/radarr:ro
            - hydra:/sources/hydra:ro
            - nextcloud:/sources/nextcloud:ro
            - mariadb:/sources/mariadb:ro
            - raneto:/sources/raneto:ro
            - ghost:/sources/ghost:ro
        networks:
            - traefik
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.duplicati.entrypoints: https
            traefik.http.routers.duplicati.tls.certresolver: tlschallenge
            traefik.http.routers.duplicati.rule: Host(`${DUPLICATI_HOST}`)
            traefik.http.routers.duplicati.middlewares: secureheaders, basicauth

    # https://hub.docker.com/r/containous/whoami
    whoami:
        image: containous/whoami
        container_name: whoami
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.whoami.entrypoints: https
            traefik.http.routers.whoami.tls.certresolver: tlschallenge
            traefik.http.routers.whoami.rule: Host(`${WHOAMI_HOST}`)
            traefik.http.routers.whoami.middlewares: secureheaders, basicauth
        networks:
            - traefik
    
    # https://hub.docker.com/r/netdata/netdata
    netdata:
        container_name: netdata
        image: netdata/netdata
        hostname: ${NETDATA_HOST}
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ: ${TZ}
        cap_add:
            - SYS_PTRACE
        security_opt:
            - apparmor:unconfined
        volumes:
            - /etc/passwd:/host/etc/passwd:ro
            - /etc/group:/host/etc/group:ro
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.netdata.entrypoints: https
            traefik.http.routers.netdata.tls.certresolver: tlschallenge
            traefik.http.routers.netdata.rule: Host(`${NETDATA_HOST}`)
            traefik.http.routers.netdata.middlewares: secureheaders, basicauth
        networks:
            - traefik

volumes:
    duplicati:
    nextcloud:
    mariadb:
    raneto:
    ghost:
