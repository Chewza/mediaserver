version: '3.7'

networks:
    frontend:
    backend:

volumes:
    plex:
    nzbget:
    sonarr:
    radarr:
    hydra:
    traefik:

services:

    # https://hub.docker.com/r/plexinc/pms-docker
    plex:
        image: plexinc/pms-docker
        environment:
            PLEX_UID: '${PUID}'
            PLEX_GID: '${PGID}'
            TZ: '${TZ}'
            PLEX_CLAIM: '${PLEX_CLAIM}'
            ADVERTISE_IP: '${ADVERTISE_IP}'
        networks:
            - frontend
        ports:
            - '32400:32400/tcp'
        volumes:
            - 'plex:/config'
            - '${MEDIA_DIR}:/media'
            - '/tmp:/tmp'
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.plex.entrypoints: https
            traefik.http.routers.plex.tls.certresolver: tlschallenge
            traefik.http.routers.plex.rule: Host(`${PLEX_HOST}`)
            traefik.http.services.plex_mediaserver.loadbalancer.server.port: 32400
            traefik.http.services.plex_mediaserver.loadbalancer.server.scheme: http

    # https://hub.docker.com/r/linuxserver/nzbget/
    nzbget:
        image: linuxserver/nzbget
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - frontend
        volumes:
            - 'nzbget:/config'
            - '${DOWNLOADS_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.nzbget.entrypoints: https
            traefik.http.routers.nzbget.tls.certresolver: tlschallenge
            traefik.http.routers.nzbget.rule: Host(`${NZBGET_HOST}`)

    # https://hub.docker.com/r/linuxserver/sonarr/
    sonarr:
        image: linuxserver/sonarr
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - frontend
        volumes:
            - 'sonarr:/config'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.sonarr.entrypoints: https
            traefik.http.routers.sonarr.tls.certresolver: tlschallenge
            traefik.http.routers.sonarr.rule: Host(`${SONARR_HOST}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/radarr/
    radarr:
        image: linuxserver/radarr
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - frontend
        volumes:
            - 'radarr:/config'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.radarr.entrypoints: https
            traefik.http.routers.radarr.tls.certresolver: tlschallenge
            traefik.http.routers.radarr.rule: Host(`${RADARR_HOST}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/hydra2/
    hydra:
        image: linuxserver/hydra2
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - frontend
        volumes:
            - 'hydra:/config'
            - '${DOWNLOADS_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.hydra.entrypoints: https
            traefik.http.routers.hydra.tls.certresolver: tlschallenge
            traefik.http.routers.hydra.rule: Host(`${HYDRA_HOST}`)

    # https://hub.docker.com/_/traefik/
    traefik:
        image: traefik
        environment:
            TZ: '${TZ}'
        networks:
            - frontend
        ports:
            - '80:80/tcp'
            - '443:443/tcp'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - 'traefik:/etc/traefik:rw'
        command:
            - "--log.level=INFO"
            - "--api=true"
            - "--global.sendanonymoususage=false"
            - "--serverstransport.insecureskipverify"
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--certificatesResolvers.tlschallenge.acme.tlschallenge=true"
            - "--certificatesresolvers.tlschallenge.acme.storage=/etc/traefik/acme.json"
            - "--certificatesresolvers.tlschallenge.acme.email=${ACME_EMAIL}"
            # - "--certificatesresolvers.tlschallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
        labels:
            traefik.enable: true
            traefik.docker.network: mediaserver_frontend
            traefik.http.routers.traefik.entrypoints: https
            traefik.http.routers.traefik.tls.certresolver: tlschallenge
            traefik.http.routers.traefik.rule: Host(`${TRAEFIK_HOST}`)
            traefik.http.routers.traefik.middlewares: secureheaders, basicauth
            traefik.http.routers.traefik.service: api@internal
            traefik.http.routers.http.entrypoints: http
            traefik.http.routers.http.rule: HostRegexp(`{catchall:.*}`)
            traefik.http.routers.http.middlewares: redirectscheme
            traefik.http.middlewares.redirectscheme.redirectscheme.scheme: https
            traefik.http.middlewares.redirectscheme.redirectscheme.permanent: true
            traefik.http.middlewares.basicauth.basicauth.usersfile: /etc/traefik/.htpasswd
            traefik.http.middlewares.secureheaders.headers.stsSeconds: 15552000
            traefik.http.middlewares.secureheaders.headers.framedeny: true
            traefik.http.middlewares.secureheaders.headers.sslForceHost: true
            traefik.http.middlewares.secureheaders.headers.sslRedirect: true
            traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains: true
            traefik.http.middlewares.secureheaders.headers.browserXssFilter: true
            traefik.http.middlewares.secureheaders.headers.contentTypeNosniff: true
            traefik.http.middlewares.secureheaders.headers.forceSTSHeader: true
            traefik.http.middlewares.secureheaders.headers.stsPreload: true
            traefik.http.middlewares.secureheaders.headers.customResponseHeaders.X-Robots-Tag: none
            traefik.http.middlewares.secureheaders.headers.customFrameOptionsValue: SAMEORIGIN
