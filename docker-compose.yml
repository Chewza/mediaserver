version: '3.7'
services:

    # https://hub.docker.com/r/linuxserver/plex/
    plex:
        container_name: plex
        image: linuxserver/plex
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
            VERSION: 'latest'
        networks:
            - traefik
        ports:
            - '32400:32400/tcp'
        volumes:
            - '${CONF_DIR}/plex:/config'
            - '${DATA_DIR}:/downloads'
            - '/tmp:/tmp'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.plex.entrypoints: https
            traefik.http.routers.plex.tls.certresolver: cloudflare
            traefik.http.routers.plex.rule: Host(`plex.${CF_DOMAIN}`) || Host(`${CF_DOMAIN}`)
            traefik.http.services.plex_mediaserver.loadbalancer.server.port: 32400
            traefik.http.services.plex_mediaserver.loadbalancer.server.scheme: http

    # https://hub.docker.com/r/linuxserver/nzbget/
    nzbget:
        container_name: nzbget
        image: linuxserver/nzbget
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONF_DIR}/nzbget:/config'
            - '${DATA_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.nzbget.entrypoints: https
            traefik.http.routers.nzbget.tls.certresolver: cloudflare
            traefik.http.routers.nzbget.rule: Host(`nzbget.${CF_DOMAIN}`)

    # https://hub.docker.com/r/linuxserver/sonarr/
    sonarr:
        container_name: sonarr
        image: linuxserver/sonarr
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONF_DIR}/sonarr:/config'
            - '${DATA_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.sonarr.entrypoints: https
            traefik.http.routers.sonarr.tls.certresolver: cloudflare
            traefik.http.routers.sonarr.rule: Host(`sonarr.${CF_DOMAIN}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/radarr/
    radarr:
        container_name: radarr
        image: linuxserver/radarr
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONF_DIR}/radarr:/config'
            - '${DATA_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.radarr.entrypoints: https
            traefik.http.routers.radarr.tls.certresolver: cloudflare
            traefik.http.routers.radarr.rule: Host(`radarr.${CF_DOMAIN}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/hydra2/
    hydra:
        container_name: hydra
        image: linuxserver/hydra2
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - '${CONF_DIR}/hydra:/config'
            - '${DATA_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.hydra.entrypoints: https
            traefik.http.routers.hydra.tls.certresolver: cloudflare
            traefik.http.routers.hydra.rule: Host(`hydra.${CF_DOMAIN}`)

    # https://hub.docker.com/_/traefik/
    traefik:
        container_name: traefik
        image: traefik:2.0.0
        restart: unless-stopped
        environment:
            TZ: '${TZ}'
            CF_API_EMAIL: '${CF_API_EMAIL}'
            CF_API_KEY: '${CF_API_KEY}'
        networks:
            - traefik
        ports:
            - '80:80/tcp'
            - '443:443/tcp'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - '${CONF_DIR}/traefik:/etc/traefik:rw'
        command:
            - "--log.level=INFO"
            - "--api=true"
            - "--global.sendanonymoususage=false"
            - "--serverstransport.insecureskipverify"
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
            - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
            - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
            - "--certificatesresolvers.cloudflare.acme.email=${CF_API_EMAIL}"
            # - "--certificatesresolvers.cloudflare.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.traefik.entrypoints: https
            traefik.http.routers.traefik.tls.certresolver: cloudflare
            traefik.http.routers.traefik.rule: Host(`traefik.${CF_DOMAIN}`)
            traefik.http.routers.traefik.middlewares: secureheaders, basicauth
            traefik.http.routers.traefik.service: api@internal
            traefik.http.routers.http.entrypoints: http
            traefik.http.routers.http.rule: HostRegexp(`${CF_DOMAIN}`, `{subdomain:[a-z]+}.${CF_DOMAIN}`)
            traefik.http.routers.http.middlewares: redirectscheme
            traefik.http.middlewares.redirectscheme.redirectscheme.scheme: https
            traefik.http.middlewares.basicauth.basicauth.users: ${HTPASSWD}
            traefik.http.middlewares.secureheaders.headers.stsSeconds: 15552000
            traefik.http.middlewares.secureheaders.headers.framedeny: true
            traefik.http.middlewares.secureheaders.headers.sslForceHost: true
            traefik.http.middlewares.secureheaders.headers.sslRedirect: true
            traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains: true
            traefik.http.middlewares.secureheaders.headers.browserXssFilter: true
            traefik.http.middlewares.secureheaders.headers.contentTypeNosniff: true
            traefik.http.middlewares.secureheaders.headers.forceSTSHeader: true
            traefik.http.middlewares.secureheaders.headers.stsPreload: true
            traefik.http.middlewares.secureheaders.headers.customResponseHeaders.X-Robots-Tag: none
            traefik.http.middlewares.secureheaders.headers.customFrameOptionsValue: SAMEORIGIN

networks:
    traefik:
        name: traefik
        attachable: true