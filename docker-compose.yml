version: '3'
services:
    plex:
        # https://github.com/plexinc/pms-docker
        # https://hub.docker.com/r/plexinc/pms-docker/
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        image: "plexinc/pms-docker:plexpass"
        volumes:
            - ./plex/config:/config
            - ./plex/media/tv:/tv
            - ./plex/media/movies:/movies
            - /tmp:/transcode
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
            - ./plex.env
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:32400/web"]
            interval: 1m
            timeout: 10s
            retries: 3
    nzbget:
        # https://github.com/linuxserver/docker-nzbget
        # https://hub.docker.com/r/linuxserver/nzbget/
        image: "linuxserver/nzbget"
        volumes:
            - ./nzbget/config:/config
            - ./nzbget/downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:6789/nzbget"]
            interval: 1m
            timeout: 10s
            retries: 3
    sonarr:
        # https://github.com/linuxserver/docker-sonarr
        # https://hub.docker.com/r/linuxserver/sonarr/
        image: "linuxserver/sonarr"
        volumes:
            - ./sonarr/config:/config
            - ./nzbget/downloads:/downloads
            - ./transmission/downloads:/transmission
            - ./plex/media/tv:/tv
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        depends_on:
            - nzbget
            - hydra
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8989/sonarr"]
            interval: 1m
            timeout: 10s
            retries: 3
    radarr:
        # https://github.com/linuxserver/docker-radarr
        # https://hub.docker.com/r/linuxserver/radarr/
        image: "linuxserver/radarr"
        volumes:
            - ./radarr/config:/config
            - ./nzbget/downloads:/downloads
            - ./transmission/downloads:/transmission
            - ./plex/media/movies:/movies
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        depends_on:
            - nzbget
            - hydra
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:7878/radarr"]
            interval: 1m
            timeout: 10s
            retries: 3
    plexpy:
        # https://github.com/linuxserver/docker-plexpy
        # https://hub.docker.com/r/linuxserver/plexpy/
        image: "linuxserver/plexpy"
        volumes:
            - ./plexpy/config:/config
            - ./plex/config/Library/Application Support/Plex Media Server/Logs:/logs:ro
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        depends_on:
            - plex
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8181/plexpy"]
            interval: 1m
            timeout: 10s
            retries: 3
    transmission:
        # https://github.com/linuxserver/docker-transmission
        # https://hub.docker.com/r/linuxserver/transmission/
        image: "linuxserver/transmission"
        ports:
            - "51413:51413/tcp"
            - "51413:51413/udp"
        volumes:
            - ./transmission/config:/config
            - ./transmission/downloads:/downloads
            - ./transmission/watch:/watch
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9091/transmission"]
            interval: 1m
            timeout: 10s
            retries: 3
    portainer:
        # https://github.com/portainer/portainer
        # https://hub.docker.com/r/portainer/portainer/
        image: "portainer/portainer"
        volumes:
            - ./portainer/config:/data
            - /var/run/docker.sock:/var/run/docker.sock
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        healthcheck:
            disable: true
    hydra:
        # https://github.com/linuxserver/docker-hydra
        # https://hub.docker.com/r/linuxserver/hydra/
        image: "linuxserver/hydra"
        volumes:
            - ./hydra/config:/config
            - ./hydra/downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        env_file:
            - ./common.env
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5075/hydra"]
            interval: 1m
            timeout: 10s
            retries: 3
    letsencrypt:
        # https://github.com/linuxserver/docker-letsencrypt
        # https://hub.docker.com/r/linuxserver/letsencrypt/
        env_file:
            - ./common.env
            - ./letsencrypt.env
        image: "linuxserver/letsencrypt"
        ports:
            - "80:80/tcp"
            - "443:443/tcp"
        volumes:
            - ./letsencrypt/config:/config
            - /etc/localtime:/etc/localtime:ro
            - /dev/rtc:/dev/rtc:ro
        deploy:
           restart_policy:
             condition: any
             delay: 5s
             max_attempts: 3
             window: 120s
        depends_on:
            - plex
            - portainer
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost"]
            interval: 1m
            timeout: 10s
            retries: 3
