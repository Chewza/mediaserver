#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

#/
#/ Usage:
#/              deploy-all
#/ Description:
#/              deploy entire stack defined by docker-compose.yml;
#/              if services already exist, they will be updated;
#/ Commands Used:
#/              docker swarm init
#/              docker stack deploy
#/ Examples:
#/              deploy-all
#/ Flags:
#/              --help: display this help message
#/

abs()     { echo "$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")"; }
usage()   { grep '^#/' "$0" | cut -c4- ; exit 0 ; }
info()    { echo "[INFO]    $*" ; }
warning() { echo "[WARNING] $*" ; }
error()   { echo "[ERROR]   $*" ; }
fatal()   { echo "[FATAL]   $*" ; exit 1 ; }

expr "$*" : ".*--help" > /dev/null && usage

readonly THIS_FILE="$(basename "$0")"
readonly BIN_DIR="$(dirname "$(abs "${BASH_SOURCE[0]}")")"
readonly PID_FILE="/tmp/${THIS_FILE%.*}.pid"
readonly LOG_FILE="/tmp/${THIS_FILE%.*}.log"
readonly SCRATCH_DIR="$(mktemp -d -t tmp.XXXXXXXXXX)"

cleanup() {
        info "cleaning up ..."
        rm "${PID_FILE}" 2>/dev/null
	rm -rf "${SCRATCH_DIR}" 2>/dev/null
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup INT TERM EXIT

# redirect output to log
[ -t 1 ] || exec &> >(ts >>"${LOG_FILE}")

# exit if pid exists
[ -f "${PID_FILE}" ] && fatal "$THIS_FILE is already running!"

# start a new pid
echo $$ > "${PID_FILE}"

if ! docker node ls | grep -q Active
then
	info "initializing swarm ..."
	docker swarm init
	info "... done!"
else
	info "swarm node is active"
fi

info "deploying stack ..."
docker stack deploy --compose-file "${BIN_DIR}/../docker-compose.yml" mediaserver
info "... task is running in background"
info "check status with 'docker service ls' and 'docker ps'"
