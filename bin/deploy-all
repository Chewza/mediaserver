#!/usr/bin/env bash

set -euo pipefail

# capture script exit
cleanup()
{
	local rc=$?
	info "exited with error level ${rc}"
	exit ${rc}
}

# get the command name without path
cmd()	{ basename "${0}" ; }

# determine absolute path to a provided file/folder
abs()	{ echo "$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")"; }

# append timestamp and loglevel prints
debug()		{ if [ "${debug_enabled:-}" == "true" ]; then 
			  echo "$(date)  [DEBUG]   $*" ; fi ; }
info()		{ echo "$(date)  [INFO]    $*" ; }
warning()	{ echo "$(date)  [WARNING] $*" ; }
error()		{ echo "$(date)  [ERROR]   $*" ; }
fatal()		{ echo "$(date)  [FATAL]   $*" ; exit 1 ; }

usage()
{
    cat <<EOF

Usage:
                $(cmd)
Description:
                deploy entire stack defined by docker-compose.yml;
                if services already exist, they will be updated;
Examples:
                $(cmd)
                $(cmd) --debug
                $(cmd) --help
Parameters:
                --help      display this help message

                --debug     enable debug logs

EOF
exit 2
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-${0}}" != "${0}" ]] && return

# trap any exit code beyond this point
trap cleanup INT TERM EXIT

# set defaults
debug_enabled="false"

# catch help param
expr "$*" : ".*--help" > /dev/null && usage

# catch debug param
expr "$*" : ".*--debug" > /dev/null && debug_enabled="true"

readonly bin_dir="$(dirname "$(abs "${0}")")"
debug "bin_dir: ${bin_dir}"

if ! docker node ls | grep -q Active
then
	info "initializing swarm ..."
	docker swarm init
	info "... done!"
else
	info "swarm node is active"
fi

# if we fail to download latest nginx.tmpl,
# do git checkout of the source controlled version to revert to something stable
info "getting latest nginx.tmpl from github.com/jwilder/docker-gen ..."
curl -# -o "${bin_dir}/../docker-gen/templates/nginx.tmpl" "https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl" ||
    git checkout "${bin_dir}/../docker-gen/templates/nginx.tmpl"

info "deploying stack ..."
docker stack deploy --compose-file "${bin_dir}/../docker-compose.yml" mediaserver
info "... task is running in background"
info "check status with 'watch docker service ls' or 'watch docker ps'"
